#!/bin/sh
#
# Univention Nagios Plugin
#  check_univention_nscd: check if nscd is bound to its socket.
#
# Copyright 2017-2019 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.
#
#

VERSION="1.00"
PROGNAME="${0##*/}"

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

state () {
    local STATE="$1"
    case "$STATE" in
        "$STATE_OK") STATE_STRING="OK" ;;
        "$STATE_WARNING") STATE_STRING="WARNING" ;;
        "$STATE_CRITICAL") STATE_STRING="CRITICAL" ;;
        *) STATE_STRING="UNKNOWN" ;;
    esac
    shift
    echo "${STATE_STRING}: $*"
    exit "$STATE"
}

print_revision() {
    echo "$PROGNAME: version $VERSION"
}

print_usage() {
    echo "Usage: $PROGNAME --help"
    echo "Usage: $PROGNAME --version"
    echo "Usage: $PROGNAME"
}

print_help() {
    print_revision
    echo ""
    print_usage
}

while [ $# -ge 1 ]
do
    case "$1" in
        --help|-h)
            print_help
            exit "$STATE_OK"
            ;;
        --version|-V)
            print_revision
            exit "$STATE_OK"
            ;;
    esac
    shift
done

nscd_socket="/var/run/nscd/socket"

if [ ! -S $nscd_socket ]; then
    state "$STATE_CRITICAL" "no nscd socket found! nscd not running?"
fi

timeout 3 nscd -g >/dev/null 2>/dev/null ||
    state "$STATE_CRITICAL" "nscd not responding!"

case "$(grep -c -F ' /var/run/nscd/socket' /proc/net/unix)" in
0) state "$STATE_CRITICAL" "no instance of nscd bound to nscd socket. nscd might have crashed." ;;
1) state "$STATE_OK" "only one instance of nscd running." ;;
esac

if [ "$(pgrep --ns "$$" nscd)" = "$(cat /var/run/nscd/nscd.pid)" ]
then
    : # everything okey
elif [ "$(pgrep --count --ns "$$" --full '^/usr/sbin/nscd')" -ge 1 ]
then
    state "$STATE_WARNING" "multiple nscd found, but not in PID file!"
else
    state "$STATE_CRITICAL" "no nscd found! nscd not running?"
fi

if ! pids_on_nscd_socket=$(fuser "$nscd_socket" 2>/dev/zero)
then
	fuser_error=$(fuser "$nscd_socket" 2>&1)
	if [ -n "$fuser_error" ]; then
		state "$STATE_UNKNOWN" "fuser command failed"
	fi
fi

ns_pid="$(readlink /proc/self/ns/pid)"
for pid in $pids_on_nscd_socket; do
	[ "$ns_pid" = "$(readlink "/proc/$pid/ns/pid")" ] ||
		continue
	process_path=$(readlink /proc/"$pid"/exe) ||
		continue

	case "${process_path##*/}" in
	nscd) ;;
	nscd.dpkg-*|nscd*' (deleted)') state "$STATE_WARNING" "Unknown program: \"$process_path\" bound to nscd socket." ;;
	*) state "$STATE_CRITICAL" "Unknown program: \"$process_path\" bound to nscd socket." ;;
	esac
done

state "$STATE_WARNING" "more than one instance of nscd bound to nscd socket."
